from aiogram import types, Router, F
from aiogram.filters.command import Command
import logging
from utils.keyboards import kb_menu, kb_search, arrows
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database.db import get_book, get_languages, get_count_of_languages

user_router = Router()

class States(StatesGroup):
    waiting_for_search_request = State()


@user_router.message(Command("start"))
async def cmd_start(message: types.Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!")


@user_router.message(Command("id"))
async def cmd_id(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–∏—Ç—å –∞–¥–º–∏–Ω–∞ –≤ .env"""

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /id")

    await message.answer(f"–í–∞—à id: {message.from_user.id}")


@user_router.message(Command("menu"))
async def cmd_menu(message: types.Message): 
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é"""

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /menu")

    await message.answer("<b>–ú–ï–ù–Æ:</b>", reply_markup=kb_menu)


@user_router.callback_query(F.data == "search_book")
async def search_book(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏"""

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.from_user.id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏")

    await state.update_data(language_index = 0)
    await call.message.edit_reply_markup(reply_markup=kb_search)


@user_router.callback_query(F.data == "search_by_name")
async def search_by_name(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    
    await state.set_state(States.waiting_for_search_request)
    await state.update_data(is_search_by_name=True)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")


@user_router.callback_query(F.data == "search_by_author")
async def search_by_author(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É"""
    
    await state.set_state(States.waiting_for_search_request)
    await state.update_data(is_search_by_author=True)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –∞–≤—Ç–æ—Ä–∞")


@user_router.callback_query(F.data == "search_by_isbn")
async def search_by_isbn(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ ISBN"""
    
    await state.set_state(States.waiting_for_search_request)
    await state.update_data(is_search_by_isbn=True)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ ISBN –∫–Ω–∏–≥–∏ (–∏–∑ 10 –∏–ª–∏ 13 —Ü–∏—Ñ—Ä)")


@user_router.callback_query(F.data == "search_by_language")
async def search_by_language(call: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑–¥–∞–Ω–∏—è"""

    await call.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑–¥–∞–Ω–∏—è: </b>")

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    data = await state.get_data()
    index = data.get("language_index")

    try:
        languages = get_languages(index)
        for language in languages:
            button_language = [types.InlineKeyboardButton(text=language[0], callback_data=f"language_{language[0]}")]
            keyboard.inline_keyboard.insert(0, button_language)
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤: {str(e)}")
        await call.message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤")

    keyboard.inline_keyboard.append(arrows)

    await call.message.edit_reply_markup(reply_markup=keyboard)


@user_router.callback_query(F.data.startswith("languages"))
async def language_arrows(call: types.CallbackQuery, state: FSMContext):
    direction = call.data.split("_")[-1]
    maximum = get_count_of_languages()
    data = await state.get_data()
    index = data.get("language_index")
    is_changed = False

    if(direction == "left"):
        if(index > 0):
            index -= 5
            is_changed = True
    else:
        if(index < maximum - 5):
            index += 5
            is_changed = True

    
    if is_changed:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])

        try:
            languages = get_languages(index)
            for language in languages:
                button_language = [types.InlineKeyboardButton(text=language[0], callback_data=f"language_{language[0]}")]
                keyboard.inline_keyboard.insert(0, button_language)
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤: {str(e)}")
            await call.message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤")

        keyboard.inline_keyboard.append(arrows)

        await state.update_data(language_index=index)
        await call.message.edit_reply_markup(reply_markup=keyboard)
    else:
        pass


@user_router.callback_query(F.data.startswith("language"))
async def search_language(call: types.CallbackQuery):
    """–ü–æ–∏—Å–∫ –ø–æ —è–∑—ã–∫—É –∏–∑–¥–∞–Ω–∏—è"""

    book = None
    language = call.data.split("_")[-1]
    print(language)
    try:
        book = get_book(language=language)
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏: {str(e)}")
        call.message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏")

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É {language}")
    if book != None:
        authors = ", ".join([author.name for author in book.authors]) if len(book.authors) > 1 else book.authors[0].name

        await call.message.answer("<b>–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:</b>")
        await call.message.answer(f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {book.title}\n<b>–ê–≤—Ç–æ—Ä—ã:</b> {authors}\n<b>–Ø–∑—ã–∫ –∏–∑–¥–∞–Ω–∏—è:</b> {book.language}\n")
    else:
        await call.message.answer("üòî <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É</b>")


@user_router.message(States.waiting_for_search_request)
async def search_by_request(message: types.Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""

    data = await state.get_data()
    book = None

    try:
        if data.get("is_search_by_name"):
            book = get_book(title=message.text)
        elif data.get("is_search_by_author"):
            book = get_book(author=message.text)
        elif data.get("is_search_by_isbn"):
            isbn = message.text
            if(len(isbn) != 10 and len(isbn) != 13):
                await message.answer("ISBN –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 –∏–ª–∏ 13 —Ü–∏—Ñ—Ä")
            else:
                book = get_book(isbn=isbn)
        
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏: {str(e)}")
        message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏")

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É {message.text}")
    if book != None:
        authors = ", ".join([author.name for author in book.authors]) if len(book.authors) > 1 else book.authors[0].name

        await message.answer("<b>–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:</b>")
        await message.answer(f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {book.title}\n<b>–ê–≤—Ç–æ—Ä—ã:</b> {authors}\n<b>–Ø–∑—ã–∫ –∏–∑–¥–∞–Ω–∏—è:</b> {book.language}\n")
    else:
        await message.answer("üòî <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É</b>")


@user_router.message()
async def ignore_messages(message: types.Message):
    """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥"""

    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º")